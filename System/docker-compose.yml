services:
  frontend:
    build:
      context: ./
      dockerfile: Frontend/Dockerfile
    restart: always
    ports:
      - "8080:80"

  postgresdataconnector:
    build:
      context: ./
      dockerfile: DataConnectors/PostgresDataConnector/Dockerfile.${ENV}
    container_name: postgresdataconnector
    # restart: always
    ports:
      - "5000:5000"
    depends_on:
      - database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      USER_EMAIL: ${USER_EMAIL}
      USER_PASSWORD: ${USER_PASSWORD}

  influxdataconnector:
    build:
      context: ./
      dockerfile: DataConnectors/InfluxDataConnector/Dockerfile.${ENV}
    container_name: influxdataconnector
    # restart: always
    ports:
      - "5001:5000"
    depends_on:
      - influxdb
      - postgresdataconnector
    environment:
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}

  scheduler:
    build:
      context: ./
      dockerfile: Scheduler/Dockerfile.${ENV}
    container_name: scheduler
    restart: always
    ports:
      - "5002:5000"
    depends_on:
      - postgresdataconnector
      - ofelia
    volumes:
      - ./Scheduler/.config:/app/opheliaConfig
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ENV: ${ENV}

  ofelia:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    # restart: always
    command: daemon --config=/etc/ofelia/config.ini
    depends_on:
      - influxdataconnector
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./Scheduler/.config:/etc/ofelia

  worker:
    build:
      context: ./
      dockerfile: Worker/Dockerfile
    depends_on:
      - scheduler
      - ofelia
    command: ["sleep", "infinity"]
    deploy:
      replicas: 5
    secrets:
      - apikeys
    environment:
      ENV: ${ENV}

  # dockercli:
  #   container_name: dockercli
  #   build:
  #     context: ./
  #     dockerfile: DockerCLI/Dockerfile
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./docker-compose.yml:/app/docker-compose.yml
  #   command: ["tail", "-f", "/dev/null"]


  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"

  database:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgresData:/var/lib/postgresql/data

  influxdb:
    image: influxdb:2.7.7
    container_name: influxdb
    ports:
      - '8086:8086'
    volumes:
      - influxdbStorage:/var/lib/influxdb2
      - influxdbConfig:/etc/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: initialBucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}

volumes:
  influxdbStorage:
    name: "APIHarvesterInfluxDBStorageVolume"
  influxdbConfig:
    name: "APIHarvesterInfluxDBConfigVolume"
  postgresData:
    name: "APIHarversterPostgresDataVolume"
  dockerCompose:
    name: "APIHarvesterDockerComposeVolume"
  

secrets:
  apikeys:
    file: ./apikeys.txt